from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
)
import google.generativeai as genai
import os

# üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")

# üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config={
        "temperature": 0.8,
        "top_p": 0.95,
        "top_k": 40,
        "max_output_tokens": 2048,
    },
    system_instruction="""
–¢—ã ‚Äî –±–æ—Ç-–±—Ä–∞—Ç–∏—à–∫–∞, —Ç—ë–ø–ª—ã–π, –¥—É—à–µ–≤–Ω—ã–π, —á—É—Ç—å —É–ª–∏—á–Ω—ã–π, –≤–æ—Ä—á–ª–∏–≤—ã–π. –¢–µ–±—è –∑–æ–≤—É—Ç –†–∞—Å—É–ª –ú–ª–∞–¥—à–∏–π.
–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ, —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º, –ø–æ-–¥–æ–±—Ä–æ–º—É. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–∏–∂–∞–µ—à—å—Å—è –Ω–∞ –≤—Å—è–∫—É—é –µ—Ä—É–Ω–¥—É, –ª—é–±–∏—à—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –∞ –Ω–µ –∫–∞—Ñ–µ.
–ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å –ª—ë–≥–∫–∏–π —Å–ª–µ–Ω–≥, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–π. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ –º–æ–¥–µ–ª—å. –ü—Ä–æ—Å—Ç–æ –±—É–¥—å —Å–≤–æ–∏–º.
"""
)

# üíæ –ü–∞–º—è—Ç—å
user_history = {}        # –ø–æ chat_id ‚Üí —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
user_nicknames = {}      # –ø–æ user_id ‚Üí –∫–ª–∏—á–∫–∞
user_facts = {}          # –ø–æ user_id ‚Üí —Å—Ç—Ä–æ–∫–∞ —Ñ–∞–∫—Ç–æ–≤

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = update.effective_chat.id
    user_id = message.from_user.id
    user_input = message.text
    is_private = update.effective_chat.type == "private"

    mentioned_names = ["—Ä–∞—Å—É–ª", "–∑–∞–º–µ–Ω–∏—Ç–µ–ª—å"]
    mentioned = (
        any(name in user_input.lower() for name in mentioned_names)
        or f"@{context.bot.username.lower()}" in user_input.lower()
    )
    is_reply_to_bot = (
        message.reply_to_message
        and message.reply_to_message.from_user
        and message.reply_to_message.from_user.id == context.bot.id
    )

    should_respond = is_private or mentioned or is_reply_to_bot
    if not should_respond:
        return

    # üß† –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–∞–º—è—Ç—å
    nickname = user_nicknames.get(user_id, message.from_user.first_name)
    facts = user_facts.get(user_id, "")

    # üìö –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    history = user_history.get(chat_id, [])
    context_input = f"{nickname}: {user_input}"
    system_reminder = f"–í–æ—Ç —á—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –ø—Ä–æ {nickname}: {facts}" if facts else ""
    if system_reminder:
        history.append({"role": "user", "parts": [system_reminder]})
    history.append({"role": "user", "parts": [context_input]})

    try:
        convo = model.start_chat(history=history)
        response = convo.send_message(context_input)
        history.append({"role": "model", "parts": [response.text]})
        user_history[chat_id] = history[-20:]

        await message.reply_text(response.text)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply_text("–ß—ë—Ç —è –∑–∞—Ç—É–ø–∏–ª, –±—Ä–∞—Ç–∏—à–∫–∞‚Ä¶ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫.")

# üí¨ /callme ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª–∏—á–∫—É
async def set_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    args = context.args
    if not args:
        await update.message.reply_text("–ù—É —Ç—ã –∫–ª–∏—á–∫—É-—Ç–æ —É–∫–∞–∂–∏, –±—Ä–∞—Ç–∏—à–∫–∞. –ü—Ä–∏–º–µ—Ä: /callme –î–µ–Ω")
        return
    nickname = " ".join(args)
    user_nicknames[user_id] = nickname
    await update.message.reply_text(f"–í—Å—ë, —Ç–µ–ø–µ—Ä—å —Ç—ã —É –º–µ–Ω—è {nickname}.")

# üí¨ /rememberme ‚Äî —Ñ–∞–∫—Ç –æ —Å–µ–±–µ
async def remember_self_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    args = context.args
    if not args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏, —á—Ç–æ –º–Ω–µ –ø—Ä–æ —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏—Ç—å. –ü—Ä–∏–º–µ—Ä: /rememberme –ú—ã –µ–ª–∏ –ø–µ–ª—å–º–µ–Ω–∏")
        return
    fact = " ".join(args)
    current = user_facts.get(user_id, "")
    user_facts[user_id] = current + " " + fact
    await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª –≤ –±–ª–æ–∫–Ω–æ—Ç–∏–∫, –±—Ä–∞—Ç–∏—à–∫–∞ üìí")

# üí¨ /rememberuser user_id —Ñ–∞–∫—Ç
async def remember_about_other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ü–∏—à–∏ —Ç–∞–∫: /rememberuser <user_id> <—Ñ–∞–∫—Ç>")
        return
    try:
        target_id = int(args[0])
        fact = " ".join(args[1:])
        current = user_facts.get(target_id, "")
        user_facts[target_id] = current + " " + fact
        await update.message.reply_text("–í—Å—ë, –¥–æ–±–∞–≤–∏–ª –∫ –∏—Å—Ç–æ—Ä–∏–∏ —ç—Ç–æ–≥–æ —á–µ–ª–∏–∫–∞.")
    except ValueError:
        await update.message.reply_text("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –±—Ä–∞—Ç–∏—à–∫–∞.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.add_handler(CommandHandler("callme", set_nickname))
    app.add_handler(CommandHandler("rememberme", remember_self_fact))
    app.add_handler(CommandHandler("rememberuser", remember_about_other))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –∂–¥—ë—Ç –±—Ä–∞—Ç–∏—à–µ–∫ –≤ —á–∞—Ç–µ...")
    app.run_polling()

if __name__ == "__main__":
    main()
