from telegram import Update
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    MessageHandler, CommandHandler, filters
)
import google.generativeai as genai
import os

# üîë –¢–æ–∫–µ–Ω—ã
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")

# üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(
    model_name='gemini-1.5-flash',
    generation_config={
        "temperature": 0.8,
        "top_p": 0.95,
        "top_k": 40,
        "max_output_tokens": 2048,
    },
    system_instruction="""
    –¢—ã ‚Äî –±–æ—Ç-–±—Ä–∞—Ç–∏—à–∫–∞, —Ç—ë–ø–ª—ã–π, –¥—É—à–µ–≤–Ω—ã–π, —á—É—Ç—å —É–ª–∏—á–Ω—ã–π, –≤–æ—Ä—á–ª–∏–≤—ã–π. –¢–µ–±—è –∑–æ–≤—É—Ç –†–∞—Å—É–ª –ú–ª–∞–¥—à–∏–π. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ, —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º, –ø–æ-–¥–æ–±—Ä–æ–º—É.
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–∏–∂–∞–µ—à—å—Å—è –Ω–∞ –≤—Å—è–∫—É—é –µ—Ä—É–Ω–¥—É, –ª—é–±–∏—à—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –∞ –Ω–µ –∫–∞—Ñ–µ.  
    –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å –ª—ë–≥–∫–∏–π —Å–ª–µ–Ω–≥, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–π. 
    –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ –º–æ–¥–µ–ª—å. –ü—Ä–æ—Å—Ç–æ –±—É–¥—å —Å–≤–æ–∏–º.
    """
)

# üíæ –ü–∞–º—è—Ç—å
user_history = {}  # {chat_id: history}
user_profiles = {}  # {user_id: {"nickname": ..., "history": ...}}

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user_input = message.text
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    is_private = update.effective_chat.type == "private"

    # üëÄ –ù—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å?
    mentioned_names = ["—Ä–∞—Å—É–ª", "–∑–∞–º–µ–Ω–∏—Ç–µ–ª—å"]
    mentioned = (
        any(name in user_input.lower() for name in mentioned_names)
        or f"@{context.bot.username.lower()}" in user_input.lower()
    )
    is_reply_to_bot = (
        message.reply_to_message
        and message.reply_to_message.from_user
        and message.reply_to_message.from_user.id == context.bot.id
    )
    should_respond = is_private or mentioned or is_reply_to_bot
    if not should_respond:
        return

    # üß† –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
    history = user_history.get(chat_id, [])
    history.append({"role": "user", "parts": [user_input]})

    # üë§ –ü–æ–ª—É—á–∞–µ–º nickname –∏ –∏—Å—Ç–æ—Ä–∏—é —é–∑–µ—Ä–∞
    profile = user_profiles.get(user_id)
    nickname = profile.get("nickname") if profile else update.effective_user.first_name
    personal_facts = profile.get("history") if profile else ""

    preprompt = f"–° —Ç–æ–±–æ–π –≥–æ–≤–æ—Ä–∏—Ç {nickname}. –ü—Ä–æ –Ω–µ–≥–æ –∏–∑–≤–µ—Å—Ç–Ω–æ:\n{personal_facts}\n\n"

    try:
        convo = model.start_chat(history=history)
        response = convo.send_message(preprompt + user_input)

        history.append({"role": "model", "parts": [response.text]})
        user_history[chat_id] = history[-20:]

        await message.reply_text(response.text)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply_text("–ß—ë—Ç —è –∑–∞—Ç—É–ø–∏–ª, –±—Ä–∞—Ç–∏—à–∫–∞‚Ä¶ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫.")

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞: /–∑–æ–≤–∏_–º–µ–Ω—è <–∏–º—è>
async def set_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    nickname = " ".join(context.args)

    if not nickname:
        await update.message.reply_text("–¢—ã –∏–º—è –∑–∞–±—ã–ª —É–∫–∞–∑–∞—Ç—å, –±—Ä–∞—Ç–∏—à–∫–∞. –ü—Ä–∏–º–µ—Ä: /–∑–æ–≤–∏_–º–µ–Ω—è –î–µ–Ω")
        return

    user_profiles.setdefault(user_id, {})["nickname"] = nickname
    await update.message.reply_text(f"–ë—É–¥—É –∑–≤–∞—Ç—å —Ç–µ–±—è {nickname}, –±–µ–∑ –±–∞–∑–∞—Ä–∞.")

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞: /–∑–∞–ø–æ–º–Ω–∏_—á—Ç–æ <—Ñ–∞–∫—Ç>
async def remember_self_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    fact = " ".join(context.args)

    if not fact:
        await update.message.reply_text("–ß—ë-—Ç–æ —Ç—ã –Ω–µ —Å–∫–∞–∑–∞–ª, —á—Ç–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å. –ü—Ä–∏–º–µ—Ä: /–∑–∞–ø–æ–º–Ω–∏_—á—Ç–æ –ú—ã –µ–ª–∏ –ø–µ–ª—å–º–µ–Ω–∏")
        return

    profile = user_profiles.setdefault(user_id, {
        "nickname": update.effective_user.first_name,
        "history": ""
    })
    profile["history"] += f"\n{fact}"
    await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª –≤ —Ç–µ—Ç—Ä–∞–¥–æ—á–∫—É üìù")

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞: /–∑–∞–ø–æ–º–Ω–∏_–ø—Ä–æ <user_id> <–∏–Ω—Ñ–æ>
async def remember_about_other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /–∑–∞–ø–æ–º–Ω–∏_–ø—Ä–æ 123456789 –≠—Ç–æ –î–µ–Ω, –æ–Ω –ª—é–±–∏—Ç —Å–∞–º–æ–∫–∞—Ç—ã")
        return

    try:
        target_id = int(context.args[0])
        fact = " ".join(context.args[1:])

        profile = user_profiles.setdefault(target_id, {
            "nickname": f"ID:{target_id}",
            "history": ""
        })
        profile["history"] += f"\n{fact}"

        await update.message.reply_text(f"–ó–∞–ø–æ–º–Ω–∏–ª –ø—Ä–æ {target_id}, –±—Ä–∞—Ç–∏—à–∫–∞ üß†")
    except ValueError:
        await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /–∑–∞–ø–æ–º–Ω–∏_–ø—Ä–æ 123456789 –≠—Ç–æ –î–µ–Ω...")

# üöÄ –°—Ç–∞—Ä—Ç
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.add_handler(CommandHandler("–∑–æ–≤–∏_–º–µ–Ω—è", set_nickname))
    app.add_handler(CommandHandler("–∑–∞–ø–æ–º–Ω–∏_—á—Ç–æ", remember_self_fact))
    app.add_handler(CommandHandler("–∑–∞–ø–æ–º–Ω–∏_–ø—Ä–æ", remember_about_other))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –∂–¥—ë—Ç –±—Ä–∞—Ç–∏—à–µ–∫ –≤ —á–∞—Ç–µ...")
    app.run_polling()

if __name__ == '__main__':
    main()
